#!/usr/bin/env bash

set -euo pipefail

format=%d/%n%e
start_num=1
increment=1
ext_max_depth=-1

usage="Rename files as a sequence of numbers.

Usage:
    ${0##*/} [OPTIONS] [FILE...]

Options:
    -h           show this help text and exit

    -n           only show what renames would be done
    -f           use -f instead of -i in the generated mv commands
    -z           stdin will be separated by nulls instead of newlines

    -w           equalize width by padding with leading zeroes
    -W NUMBER    pad each number to an exact width with leading zeroes

    -s NUMBER    starting number (default: $start_num)
    -i NUMBER    increment (default: $increment)

    -F FORMAT    file path format (default: $format)

    -e NUMBER    use a maximum of NUMBER extensions from each file for %e
                 (default: $ext_max_depth i.e. all extensions)

The following placeholders are recognized in FORMAT:
    %n           number of FILE (required)
    %N           total number of files
    %d           directory of FILE
    %b           basename of FILE
    %e           extension of FILE

If no FILEs are given as arguments, they will be read from stdin."

extname() {
    local base=${1##*/}
    local max_depth=${2:--1}

    local tokens
    IFS=. read -ra tokens <<<"$base"

    if ((max_depth < 0)); then
        max_depth=$((${#tokens[@]} - 1))
    fi

    local depth ext=
    for ((depth = 1; depth <= max_depth; depth++)); do
        ext=.${tokens[-$depth]}$ext
    done

    printf "%s\n" "$ext"
}

auto_width=0
mkbr_options=()
read_options=()

while getopts ":W:wF:s:i:e:nfzh" option; do
    case $option in
    W) width=$OPTARG ;;
    w) auto_width=1 ;;
    F) format=$OPTARG ;;
    s) start_num=$OPTARG ;;
    i) increment=$OPTARG ;;
    e) ext_max_depth=$OPTARG ;;
    n) mkbr_options+=(-n) ;;
    f) mkbr_options+=(-f) ;;
    z) read_options+=(-d '') ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    :)
        printf "Option missing argument: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

if [[ $format != *%n* ]]; then
    printf "Invalid format: %q (must contain %%n)\n" "$format" >&2
    exit 1
fi

if [[ -v width && ! $width =~ [1-9][0-9]* ]]; then
    printf "Invalid width: %s (must be a positive integer)\n" "$width" >&2
    exit 1
fi

if [[ $start_num =~ [^0-9] ]]; then
    printf "Invalid start number: %s (must be an integer)\n" "$start_num" >&2
    exit 1
fi

if [[ ! $increment =~ [1-9][0-9]* ]]; then
    printf "Invalid increment: %s (must be a positive integer)\n" "$increment" >&2
    exit 1
fi

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -r %q" "$temp_dir"
trap '$cleanup' EXIT

src_list=$temp_dir/src
dst_list=$temp_dir/dst

if (($# == 0)); then
    readarray -t "${read_options[@]}" paths
else
    paths=("$@")
fi

printf "%s\0" "${paths[@]}" >"$src_list"

num=$start_num
format=${format/\%N/$#}
end_num=$((start_num + ${#paths[@]} - 1))

if ((auto_width)); then
    width=${#end_num}
fi

while IFS= read -r -d '' src; do
    if [[ -v width ]]; then
        printf -v num_padded "%0*d" "$width" "$num"
    else
        num_padded=$num
    fi

    dir=$(dirname "$src")
    ext=$(extname "$src" "$ext_max_depth")
    base=$(basename "$src" "$ext")

    dst=$format
    dst=${dst//\%n/$num_padded}
    dst=${dst//\%d/$dir}
    dst=${dst//\%b/$base}
    dst=${dst//\%e/$ext}

    printf "%s\0" "$dst" >>"$dst_list"

    num=$((num + increment))
done <"$src_list"

mkbrsh -z "${mkbr_options[@]}" "$src_list" "$dst_list"

#!/usr/bin/env bash

set -euo pipefail

algorithms=(md5 sha{1,224,256,384,512} b2)

usage="Rename files to hashes based on contents.

Usage:
    ${0##*/} [OPTIONS] ALGORITHM [FILE...]

Options:
    -h    show this help text and exit
    -n    only show what renames would be done
    -f    use -f instead of -i in the generated mv commands
    -z    files given over stdin will be separated by nulls (instead of newlines)

Where ALGORITHM is one of: ${algorithms[*]}

If no FILEs are given as arguments, they will be read from stdin."

extname() {
    awk 'match($0, /(\.[[:alnum:]]+)+$/) { print substr($0, RSTART, RLENGTH) }' <<<"$1"
}

mkbr_options=()
read_options=()

while getopts ":nfzh" option; do
    case $option in
    n) mkbr_options+=(-n) ;;
    f) mkbr_options+=(-f) ;;
    z) read_options+=(-d '') ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

algorithm=${1:?missing algorithm}

if ! printf "%s\n" "${algorithms[@]}" | grep -q "^$algorithm$"; then
    printf "Invalid algorithm: %s\n" "$algorithm" >&2
    exit 1
fi

shift

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -r %q" "$temp_dir"
trap '$cleanup' EXIT

src_list=$temp_dir/src
dst_list=$temp_dir/dst

if (($# == 0)); then
    readarray -t "${read_options[@]}" paths
else
    paths=("$@")
fi

printf "%s\0" "${paths[@]}" >"$src_list"

while IFS= read -r -d '' src; do
    dir=$(dirname "$src")
    ext=$(extname "$src")
    base=$("$algorithm"sum <"$src" | cut -d' ' -f1)
    dst=$dir/$base$ext

    printf "%s\0" "$dst" >>"$dst_list"
done <"$src_list"

mkbrsh -z "${mkbr_options[@]}" "$src_list" "$dst_list"

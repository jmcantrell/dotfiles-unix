#!/usr/bin/env bash

set -euo pipefail

format=%d/%n%e
start_num=1
increment=1

usage="Rename files as a sequence of numbers.

Usage:
    ${0##*/} [OPTIONS] FILE...

Options:
    -h           show this help text and exit
    -f           use -f instead of -i in the generated mv commands
    -w           equalize width by padding with leading zeroes
    -W NUMBER    pad each number to an exact width with leading zeroes
    -s NUMBER    starting number (default: $start_num)
    -i NUMBER    increment (default: $increment)
    -F FORMAT    file path format (default: $format)

The following placeholders are recognized in FORMAT:
    %n           number of FILE (required)
    %N           total number of files
    %d           directory of FILE
    %b           basename of FILE
    %e           extension of FILE"

extname() {
    awk 'match($0, /(\.[[:alnum:]]+)+$/) { print substr($0, RSTART, RLENGTH) }' <<<"$1"
}

declare -a mkbr_options

auto_width=0

while getopts ":F:s:i:W:wfh" option; do
    case $option in
    F) format=$OPTARG ;;
    s) start_num=$OPTARG ;;
    i) increment=$OPTARG ;;
    W) width=$OPTARG ;;
    w) auto_width=1 ;;
    f) mkbr_options+=(-f) ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

if [[ $format != *%n* ]]; then
    printf "Invalid format: %q (must contain %%n)\n" "$format" >&2
    exit 1
fi

if [[ -v width && $width == *[!0-9]* ]]; then
    printf "Invalid width: %s (must be a positive integer)\n" "$width">&2
    exit 1
fi

if [[ $start_num == *[!0-9]* ]]; then
    printf "Invalid start number: %s (must be a positive integer)\n" "$start_num" >&2
    exit 1
fi

if [[ $increment == *[!0-9]* ]]; then
    printf "Invalid increment: %s (must be a positive integer)\n" "$increment" >&2
    exit 1
fi

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -r %q" "$temp_dir"
trap '$cleanup' EXIT

src_list=$temp_dir/src
dst_list=$temp_dir/dst

if (($# == 0)); then
    cat >"$src_list"
else
    for path in "$@"; do
        if [[ $path == *$'\n'* ]]; then
            printf "Invalid path: %q (contains newline)\n" "$path" >&2
            exit 1
        fi
    done
    printf "%s\n" "$@" >"$src_list"
fi

num=$start_num
format=${format/\%N/$#}
num_lines=$(wc -l <"$src_list")
end_num=$((start_num + num_lines - 1))

if ((auto_width)); then
    width=${#end_num}
fi

while IFS= read -r src; do
    if [[ -v width ]]; then
        printf -v num_padded "%0*d" "$width" "$num"
    else
        num_padded=$num
    fi

    dir=$(dirname "$src")
    ext=$(extname "$src")
    base=$(basename "$src" "$ext")

    dst=$format
    dst=${dst/\%n/$num_padded}
    dst=${dst/\%d/$dir}
    dst=${dst/\%b/$base}
    dst=${dst/\%e/$ext}

    printf "%s\n" "$dst" >>"$dst_list"

    num=$((num + increment))
done <"$src_list"

mkbr "${mkbr_options[@]}" "$src_list" "$dst_list"

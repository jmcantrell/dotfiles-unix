#!/usr/bin/env bash

# Edit files with elevated privileges in the current environment.

set -eu

die() {
    printf "%s: line %s: %s\n" "$0" "${BASH_LINENO[0]}" "$1" >&2
    exit "${2:-1}"
}

temp_dir=$(mktemp -d -t "${0##*/}.XXXXXXXXXX")

mkdir -p "$temp_dir"
sudo chown -R "$USER:$USER" "$temp_dir"
sudo chmod 700 "$temp_dir"
printf -v cleanup "rm -rf %q" "$temp_dir"
trap "$cleanup" INT TERM EXIT

files=()
temp_files=()
owners=()
permissions=()

for path in "$@"; do
    if [[ -e $path && ! -f $path ]]; then
        die "path is not a regular file -- $path"
    fi
done

for path in "$@"; do
    # Ensure the path is absolute and dereferenced.
    file=$(realpath -m "$path")
    files+=("$file")

    # Generate temp path with the original embedded.
    temp_file=$temp_dir/${file##/}
    temp_files+=("$temp_file")

    # Grab file attributes or use defaults.
    if [[ -f $file ]]; then
        owners+=("$(stat -c %u:%g "$file")")
        permissions+=("$(stat -c %a "$file")")
    else
        owners+=(0:0)
        permissions+=(644)
    fi

    mkdir -p "$(dirname "$temp_file")"

    if [[ -f $file ]]; then
        sudo cp "$file" "$temp_file"
        sudo chmod 644 "$temp_file"
        sudo chown "$USER:$USER" "$temp_file"
    fi
done

# Recognize editor override, similar to sudoedit.
${SUDO_EDITOR:-${EDITOR:-vim}} "${temp_files[@]}"

for ((i = 0; i < ${#files[@]}; i++)); do
    # If non-existent file was not saved, don't try to copy it.
    [[ -e ${temp_files[i]} ]] || continue

    # Restore ownership and permissions.
    sudo chown "${owners[i]}" "${temp_files[i]}"
    sudo chmod "${permissions[i]}" "${temp_files[i]}"

    # Copy file back to original location, preserving attributes.
    sudo mkdir -p "$(dirname "${files[i]}")"
    sudo cp --preserve=mode,ownership "${temp_files[i]}" "${files[i]}"
done

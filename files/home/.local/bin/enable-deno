#!/usr/bin/env bash

set -euo pipefail

archives_dir=${DENO_ARCHIVES:-${XDG_CACHE_HOME:-$HOME/.cache}/deno}
versions_dir=${DENO_VERSIONS:-${XDG_DATA_HOME:-$HOME/.local/share}/deno}

usage="Install a version of Deno.

Usage:
    ${0##*/} [OPTIONS] [VERSION]

Options:
    -h               show this help message and exit

    -D DIRECTORY     store versions in DIRECTORY
                     (default: ${versions_dir@Q})

    -A DIRECTORY     store archives in DIRECTORY
                     (default: ${archives_dir@Q})

Arguments:
    VERSION          install VERSION
                     (e.g. '1.26.1', 'latest', or 'system')

Environment:
    DENO_VERSIONS    store versions in this directory (same as -D
    DENO_ARCHIVES    store archives in this directory (same as -A)"

while getopts ":D:A:P:h" option; do
    case $option in
    D) versions_dir=$OPTARG ;;
    A) archives_dir=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    :)
        printf "Option missing argument: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

repo=denoland/deno
kernel=$(uname --kernel-name)
machine=$(uname --machine)

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -rf %q" "$temp_dir"
trap '$cleanup' EXIT

versions_file=$temp_dir/versions

while read -r line; do
    if [[ $line =~ .*refs/tags/v(.*)$ ]]; then
        printf "%s\n" "${BASH_REMATCH[1]}"
    fi
done < <(git ls-remote --tags --refs "https://github.com/$repo") |
    sort -r --version-sort >"$versions_file"

version=${1:-latest}

curl_release_json() {
    curl -sSL "https://api.github.com/repos/$repo/releases/tags/v$1"
}

case $version in
system)
    version=$(deno --version | cut -c2-)
    release_json=$(curl_release_json "$version")
    ;;
latest)
    while read -r version; do
        release_json=$(curl_release_json "$version")
        if jq -er .tag_name <<<"$release_json" >/dev/null; then
            break
        else
            continue
        fi
    done < <(head -n3 "$versions_file")
    ;;
*)
    if ! grep -q "^$version$" "$versions_file"; then
        printf "Invalid version: %s\n" "$version" >&2
        exit 1
    fi
    release_json=$(curl_release_json "$version")
    ;;
esac

version_dir=$versions_dir/$version
archive_file=$archives_dir/deno-$version.zip

if [[ ! -f $archive_file ]]; then
    case $kernel in
    Darwin) kernel=apple-darwin ;;
    Linux) kernel=unknown-linux-gnu ;;
    esac

    machine=${machine/arm/aarch}

    archive_url=$(jq -er --arg name "deno-$machine-$kernel.zip" '.assets[] | select(.name == $name).browser_download_url' <<<"$release_json")

    printf "Downloading Deno v%s: %s\n" "$version" "$archive_url"
    mkdir -p "$(dirname "$archive_file")"
    curl -L -o "$archive_file" "$archive_url"
fi

if [[ ! -d $version_dir ]]; then
    temp_version_dir=$temp_dir/version
    mkdir -p "$temp_version_dir"

    unzip -d "$temp_version_dir"/bin -o "$archive_file"

    mkdir -p "$(dirname "$version_dir")"
    mv -v "$temp_version_dir" "$version_dir"

    printf "Deno v%s is now installed at: %q\n" "$version" "$version_dir"
else
    printf "Deno v%s is already installed at: %q\n" "$version" "$version_dir"
fi

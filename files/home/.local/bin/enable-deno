#!/usr/bin/env bash

# Initialize a Deno prefix.
# Usage: enable-deno [VERSION]

set -euo pipefail

REPO=denoland/deno
KERNEL=$(uname --kernel-name)
MACHINE=$(uname --machine)

tags_ordered_by_version() {
    git ls-remote --tags --refs "https://github.com/$REPO" |
        sed -n "s:^.*tags/\(\S*\).*$:\1:p" |
        sort -r --version-sort
}

curl_release_json() {
    curl -sSL "https://api.github.com/repos/$REPO/releases/tags/$1"
}

find_latest_release_json() {
    while read -r tag; do
        curl_release_json "$tag" && return
    done < <(tags_ordered_by_version)
}

if [[ ! -v 1 ]]; then
    release_json=$(find_latest_release_json)
else
    release_json=$(curl_release_json v"$1")
fi

if ! tag=$(jq -er .tag_name <<<"$release_json"); then
    printf "No release found\n" >&2
    exit 1
fi

version=${tag#v}

prefix=${XDG_DATA_HOME:-$HOME/.local/share}/deno/$version
archive_file=${XDG_CACHE_HOME:-$HOME/.cache}/deno/deno-$version.zip

if [[ ! -f $archive_file ]]; then
    case $KERNEL in
    Darwin) kernel=apple-darwin ;;
    Linux) kernel=unknown-linux-gnu ;;
    esac

    machine=${MACHINE/arm/aarch}

    archive_url=$(jq -er --arg name "deno-$machine-$kernel.zip" '.assets[] | select(.name == $name).browser_download_url' <<<"$release_json")

    printf "Downloading Deno v%s: %s\n" "$version" "$archive_url"
    mkdir -p "$(dirname "$archive_file")"
    curl -L -o "$archive_file" "$archive_url"
fi

if [[ -d $prefix ]]; then
    printf "Deno v%s is already installed at: %q\n" "$version" "$prefix"
    exit 0
fi

mkdir -p "$prefix"/bin
unzip -d "$prefix"/bin -o "$archive_file"

printf "Deno v%s is now installed at: %q\n" "$version" "$prefix"

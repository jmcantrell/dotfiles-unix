#!/usr/bin/env bash

# Initialize a Deno prefix.
# Usage: enable-deno [VERSION]

set -euo pipefail

die() {
    printf "%s: line %s: %s\n" "$0" "${BASH_LINENO[0]}" "$1" >&2
    exit "${2:-1}"
}

REPO=denoland/deno

releases_file=$(mktemp -t "${0##*/}.XXXXXXXXXX")
printf -v cleanup "rm %q" "$releases_file"
trap '$cleanup' EXIT

curl -sSL -o "$releases_file" \
    "https://api.github.com/repos/$REPO/releases"

if [[ -v 1 ]]; then
    release_json=$(jq -er --arg version "$1" 'map(select(.tag_name == "v" + $version)) | first' "$releases_file") || die "version not found: $1"
else
    release_json=$(jq -r '.[0]' "$releases_file")
fi

tag=$(jq -r '.tag_name' <<<"$release_json")
version=${tag#v}

prefix=${XDG_DATA_HOME:-$HOME/.local/share}/deno/$version
archive=${XDG_CACHE_HOME:-$HOME/.cache}/deno/deno-$version.zip

kernel=$(uname --kernel-name)
machine=$(uname --machine)

case $kernel in
Darwin) kernel=apple-darwin ;;
Linux) kernel=unknown-linux-gnu ;;
esac

case $machine in
arm*) machine=${machine/arm/aarch} ;;
esac

target=$machine-$kernel

if [[ ! -f $archive ]]; then
    printf "Downloading Deno v%s\n" "$version"
    mkdir -p "$(dirname "$archive")"
    url=https://github.com/$REPO/releases/download/$tag/deno-$target.zip
    curl -L --progress-bar -o "$archive" "$url" || die "unable to download archive -- $url"
fi

if [[ -d $prefix ]]; then
    exit 0
fi

mkdir -p "$prefix"/bin
unzip -d "$prefix"/bin -o "$archive"

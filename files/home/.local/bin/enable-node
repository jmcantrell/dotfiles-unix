#!/usr/bin/env bash

# Initialize a Node.js prefix.
# Usage: enable-node [VERSION]

set -euo pipefail

REPO=nodejs/node
KERNEL=$(uname --kernel-name)
MACHINE=$(uname --machine)

tags_ordered_by_version() {
    git ls-remote --tags --refs "https://github.com/$REPO" |
        sed -n "s:^.*tags/\(\S*\).*$:\1:p" |
        sort -r --version-sort
}

curl_release_json() {
    curl -sSL "https://api.github.com/repos/$REPO/releases/tags/$1"
}

find_latest_release_json() {
    while read -r tag; do
        curl_release_json "$tag" && return
    done < <(tags_ordered_by_version)
}

if [[ ! -v 1 ]]; then
    release_json=$(find_latest_release_json)
else
    release_json=$(curl_release_json v"$1")
fi

if ! tag=$(jq -er .tag_name <<<"$release_json"); then
    printf "No release found\n" >&2
    exit 1
fi

version=${tag#v}

prefix=${XDG_DATA_HOME:-$HOME/.local/share}/node/$version
archive_file=${XDG_CACHE_HOME:-$HOME/.cache}/node/node-$version.tar.xz

if [[ ! -f $archive_file ]]; then
    archive_url=https://nodejs.org/dist/$tag/node-$tag-${KERNEL,,}-${MACHINE/#x86_/x}.tar.xz
    printf "Downloading Node.js v%s: %s\n" "$version" "$archive_url"
    mkdir -p "$(dirname "$archive_file")"
    curl -L -o "$archive_file" "$archive_url"
fi

if [[ -d $prefix ]]; then
    printf "Node.js v%s is already installed at: %q\n" "$version" "$prefix"
    exit 0
fi

mkdir -p "$prefix"
tar -xf "$archive_file" -C "$prefix" --strip-components=1

export PATH=$prefix/bin:$PATH

npm install --global npm

packages_file=${NODE_DEFAULT_PACKAGES:-$HOME/.default-node-packages}

if [[ -f $packages_file ]]; then
    xargs -r npm install --global <"$packages_file"
fi

printf "Node.js v%s is now installed at: %q\n" "$version" "$prefix"

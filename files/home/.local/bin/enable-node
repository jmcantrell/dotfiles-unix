#!/usr/bin/env bash

set -euo pipefail

archives_dir=${NODE_ARCHIVES:-${XDG_CACHE_HOME:-$HOME/.cache}/node}
versions_dir=${NODE_VERSIONS:-${XDG_DATA_HOME:-$HOME/.local/share}/node}
packages_file=${NODE_PACKAGES:-${XDG_CONFIG_HOME:-$HOME/.config}/node/packages}

usage="Install a version of Node.js.

Usage:
    ${0##*/} [OPTIONS] [VERSION]

Options:
    -h               show this help message and exit

    -D DIRECTORY     store versions in DIRECTORY
                     (default: ${versions_dir@Q})

    -A DIRECTORY     store archives in DIRECTORY
                     (default: ${archives_dir@Q})

    -P FILE          install packages listed in FILE
                     (default: ${packages_file@Q})

Arguments:
    VERSION          install VERSION
                     (e.g. '18.11.0', 'latest', or 'system')

Environment:
    NODE_VERSIONS    store versions in this directory (same as -D
    NODE_ARCHIVES    store archives in this directory (same as -A)
    NODE_PACKAGES    install packages listed in this file (same as -P)"

while getopts ":D:A:P:h" option; do
    case $option in
    D) versions_dir=$OPTARG ;;
    A) archives_dir=$OPTARG ;;
    P) packages_file=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    :)
        printf "Option missing argument: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

repo=nodejs/node
kernel=$(uname --kernel-name)
machine=$(uname --machine)

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -rf %q" "$temp_dir"
trap '$cleanup' EXIT

versions_file=$temp_dir/versions

while read -r line; do
    if [[ $line =~ .*refs/tags/v(.*)$ ]]; then
        printf "%s\n" "${BASH_REMATCH[1]}"
    fi
done < <(git ls-remote --tags --refs "https://github.com/$repo") |
    sort -r --version-sort >"$versions_file"

version=${1:-latest}

curl_release_json() {
    curl -sSL "https://api.github.com/repos/$repo/releases/tags/v$1"
}

case $version in
system)
    version=$(node --version | cut -c2-)
    release_json=$(curl_release_json "$version")
    ;;
latest)
    while read -r version; do
        release_json=$(curl_release_json "$version")
        if jq -er .tag_name <<<"$release_json" >/dev/null; then
            break
        else
            continue
        fi
    done < <(head -n3 "$versions_file")
    ;;
*)
    if ! grep -q "^$version$" "$versions_file"; then
        printf "Invalid version: %s\n" "$version" >&2
        exit 1
    fi
    release_json=$(curl_release_json "$version")
    ;;
esac

version_dir=$versions_dir/$version
archive_file=$archives_dir/node-$version.tar.xz

if [[ ! -f $archive_file ]]; then
    ext=xz
    [[ $kernel == Darwin ]] && ext=gz
    temp_file=$temp_dir/archive.tar.$ext
    archive_file_name=node-v$version-${kernel,,}-${machine/#x86_/x}.tar.$ext
    archive_url=https://nodejs.org/dist/v$version/$archive_file_name
    printf "Downloading Node.js v%s: %s\n" "$version" "$archive_url"
    curl -L -o "$temp_file" "$archive_url"

    checksum=$(curl -sSL "https://nodejs.org/dist/v$version/SHASUMS256.txt.asc" | grep "$archive_file_name" | cut -d' ' -f1)
    printf "%s %s\n" "$checksum" "$temp_file" | sha256sum -c -

    mkdir -p "$(dirname "$archive_file")"
    mv "$temp_file" "$archive_file"
fi

if [[ ! -d $version_dir ]]; then
    temp_version_dir=$temp_dir/version
    mkdir -p "$temp_version_dir"

    tar -xf "$archive_file" -C "$temp_version_dir" --strip-components=1

    mkdir -p "$(dirname "$version_dir")"
    mv -v "$temp_version_dir" "$version_dir"

    printf "Node.js v%s is now installed at: %q\n" "$version" "$version_dir"
else
    printf "Node.js v%s is already installed at: %q\n" "$version" "$version_dir"
fi

packages_done=$version_dir/.packages

if [[ ! -f $packages_done ]]; then
    export PATH=$version_dir/bin:$PATH

    npm install --global npm

    if [[ -f $packages_file ]]; then
        xargs -r npm install --global <"$packages_file"
    fi

    cp "$packages_file" "$packages_done"
fi

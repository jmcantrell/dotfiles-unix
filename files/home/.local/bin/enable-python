#!/usr/bin/env bash

# Initialize a Python prefix.
# Usage: enable-python [VERSION]

set -euo pipefail

REPO_URL=https://github.com/python/cpython

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -r %q" "$temp_dir"
trap '$cleanup' EXIT

versions_file=$temp_dir/versions

git ls-remote --tags --refs "$REPO_URL" |
    sed -n "s:^.*refs/tags/v\(\S*\).*$:\1:p" |
    sort -r --version-sort >"$versions_file"

version=${1:-$(grep -vi -m1 '[a-z]' "$versions_file")}

if ! grep -q "^$version$" "$versions_file"; then
    printf "Invalid version: %s\n" "$version" >&2
    exit 1
fi

prefix=${XDG_DATA_HOME:-$HOME/.local/share}/python/$version
archive_file=${XDG_CACHE_HOME:-$HOME/.cache}/python/python-$version.tar.gz

if [[ ! -f $archive_file ]]; then
    archive_url=$REPO_URL/archive/refs/tags/v${version}.tar.gz
    printf "Downloading Python v%s: %s\n" "$version" "$archive_url"
    mkdir -p "$(dirname "$archive_file")"
    curl -L -o "$archive_file" "$archive_url"
fi

if [[ -d $prefix ]]; then
    exit 0
fi

cd "$temp_dir"

tar -xf "$archive_file" --strip-components=1

./configure --prefix="$prefix" --enable-optimizations
make --jobs="$(nproc)" install

export PATH=$prefix/bin:$PATH

major_version=${version%%.*}

for name in pip idle pydoc python; do
    ln -vsfn "$prefix/bin/$name$major_version" "$prefix/bin/$name"
done
ln -vsfn "$prefix/bin/python$major_version"-config "$prefix"/bin/python-config

pip install --upgrade pip

packages_file=${PYTHON_DEFAULT_PACKAGES:-$HOME/.default-python-packages}

if [[ -f $packages_file ]]; then
    xargs -r pip install --upgrade <"$packages_file"
fi

#!/usr/bin/env bash

set -euo pipefail

archives_dir=${RUBY_ARCHIVES:-${XDG_CACHE_HOME:-$HOME/.cache}/ruby}
versions_dir=${RUBY_VERSIONS:-${XDG_DATA_HOME:-$HOME/.local/share}/ruby}
packages_file=${RUBY_PACKAGES:-${XDG_CONFIG_HOME:-$HOME/.config}/ruby/packages}

usage="Install a version of Ruby.

Usage:
    ${0##*/} [OPTIONS] [VERSION]

Options:
    -h                 show this help message and exit

    -D DIRECTORY       store versions in DIRECTORY
                       (default: ${versions_dir@Q})

    -A DIRECTORY       store archives in DIRECTORY
                       (default: ${archives_dir@Q})

    -P FILE            install packages listed in FILE
                       (default: ${packages_file@Q})

Arguments:
    VERSION            install VERSION
                       (e.g. '3.0.4', 'latest', or 'system')

Environment:
    RUBY_VERSIONS    store versions in this directory (same as -D
    RUBY_ARCHIVES    store archives in this directory (same as -A)
    RUBY_PACKAGES    install packages listed in this file (same as -P)"

while getopts ":D:A:P:h" option; do
    case $option in
    D) versions_dir=$OPTARG ;;
    A) archives_dir=$OPTARG ;;
    P) packages_file=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    :)
        printf "Option missing argument: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

repo=ruby/ruby

temp_dir=$(mktemp -d -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm -rf %q" "$temp_dir"
trap '$cleanup' EXIT

versions_file=$temp_dir/versions

while read -r line; do
    if [[ $line =~ .*refs/tags/v(.*)$ ]]; then
        tag=${BASH_REMATCH[1]}
        tag=${tag/_/.}
        tag=${tag/_/.}
        tag=${tag/_/-}
        printf "%s\n" "$tag"
    fi
done < <(git ls-remote --tags --refs "https://github.com/$repo") |
    sort -r --version-sort >"$versions_file"

version=${1:-latest}

case $version in
system)
    version=$(ruby --version | cut -d' ' -f2)
    version=${version%p*}
    ;;
latest)
    version=$(grep -v -m1 '[^0-9.]' "$versions_file")
    ;;
*)
    if ! grep -q "^$version$" "$versions_file"; then
        printf "Invalid version: %s\n" "$version" >&2
        exit 1
    fi
    ;;
esac

version_dir=$versions_dir/$version
archive_file=$archives_dir/ruby-$version.tar.gz

if [[ ! -f $archive_file ]]; then
    tag=${version/./_}
    tag=${tag/./_}
    tag=v${tag//-/_}
    archive_url=https://github.com/$repo/archive/refs/tags/$tag.tar.gz
    printf "Downloading Ruby v%s: %s\n" "$version" "$archive_url"
    mkdir -p "$(dirname "$archive_file")"
    curl -L -o "$archive_file" "$archive_url"
fi

if [[ ! -d $version_dir ]]; then
    src_dir=$temp_dir/src
    mkdir -p "$src_dir"

    pushd "$src_dir" >/dev/null

    tar -xf "$archive_file" --strip-components=1

    ./autogen.sh
    ./configure --prefix="$version_dir"
    make --jobs="$(nproc)" install

    popd >/dev/null

    printf "Ruby v%s is now installed at: %q\n" "$version" "$version_dir"
else
    printf "Ruby v%s is already installed at: %q\n" "$version" "$version_dir"
fi

packages_done=$version_dir/.packages

if [[ ! -f $packages_done ]]; then
    export PATH=$version_dir/bin:$PATH

    gem update --system

    if [[ -f $packages_file ]]; then
        xargs -r gem install <"$packages_file"
        cp "$packages_file" "$packages_done"
    fi
fi

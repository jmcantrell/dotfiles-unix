#!/usr/bin/env bash

set -euo pipefail

usage="Generate, confirm, and execute a bulk rename script.

Usage:
    ${0##*/} [OPTIONS] FROM_LIST TO_LIST

Options:
    -h           show this help text and exit
    -n           only show what renames would be done
    -f           use -f instead of -i for generated mv commands
    -z           paths in lists are separated by nulls (instead of newlines)

Arguments:
    FROM_LIST    file containing the original paths (one per line)
    TO_LIST      file containing the desired paths (one per line)

A script will be generated, opened in EDITOR for review, and executed with sh.

It's expected that the path on a line in FROM_LIST corresponds with the path on
the same line in TO_LIST.

This command will error if the number of paths in each list does not match.

It will exit silently if the lists are empty."

dry_run=0
mv_option=i
use_nulls=0

while getopts ":nfzh" option; do
    case $option in
    n) dry_run=1 ;;
    f) mv_option=f ;;
    z) use_nulls=1 ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

num_lines() {
    local options=()
    ((use_nulls)) && options+=(-z)
    grep "${options[@]}" -c '.*' "$@"
}

src_list=${1:?missing source list}
dst_list=${2:?missing destination list}

src_num_lines=$(num_lines "$src_list")
dst_num_lines=$(num_lines "$dst_list")

if ((src_num_lines != dst_num_lines)); then
    printf "The number of paths does not match: source=%d != destination=%d\n" "$src_num_lines" "$dst_num_lines" >&2
    exit 1
fi

((src_num_lines == 0)) && exit 0

script=$(mktemp -t "${0##*/}".XXXXXXXXXX)
printf -v cleanup "rm %q" "$script"
trap '$cleanup' EXIT

cat >"$script" <<-EOF
# This file will be executed when you close the editor.
# Please double-check everything, clear the file to abort.
EOF

has_changes=0
tmpl_mkdir="mkdir -vp -- %q"
tmpl_mv="mv -v$mv_option -- %q %q"

read_options=()
((use_nulls)) && read_options+=(-d '')

declare -A seen_dirs

exec 3<"$dst_list"

while IFS= read -r "${read_options[@]}" src; do
    IFS= read -r "${read_options[@]}" dst <&3

    if [[ $src == "$dst" || -z $src || -z $dst ]]; then
        continue
    fi

    has_changes=1

    src_dir=$(dirname "$src")
    dst_dir=$(dirname "$dst")

    if [[ $src_dir != "$dst_dir" && ! -v seen_dirs[$dst_dir] ]]; then
        if [[ ! -d $dst_dir ]]; then
            printf "$tmpl_mkdir\n" "$dst_dir" >>"$script"
        fi
        seen_dirs[$dst_dir]=1
    fi

    printf "$tmpl_mv\n" "$src" "$dst" >>"$script"
done <"$src_list"

if ((has_changes)); then
    if ((dry_run)); then
        grep -v '^\s*#' "$script"
    else
        ${EDITOR:-vim} "$script"
        sh "$script"
    fi
fi

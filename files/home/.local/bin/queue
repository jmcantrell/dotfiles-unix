#!/usr/bin/env bash

set -eu

me=${0##*/}
usage="Safely manage a queue of items.

Usage:
    $me FILE [ACTION]

Arguments:
    FILE      file in which to store queued items
    ACTION    action to perform against queue file

Actions:
    list      list items in the queue (default)
    add       add items from stdin to queue
    pop       remove next item from queue and print it
    clear     remove all items from queue

Items are popped from the top and added to the bottom.
"

usage() {
    printf "%s\n" "$usage"
    exit 0
}

die() {
    printf "%s: line %s: %s\n" "$0" "${BASH_LINENO[0]}" "$1" >&2
    exit "${2:-1}"
}

while getopts ":h" option; do
    case $option in
    h) usage ;;
    *) die "invalid option -- $OPTARG" ;;
    esac
done && shift $((OPTIND - 1))

queue=${1:?missing queue file}
action=${2:-list}

case $action in
list | add | pop | clear | hold) ;;
*) die "invalid action -- $action" ;;
esac

# Ensure this invocation has exclusive access to the queue file.
# If it doesn't, wait until it does.
if [[ ${FLOCKER:-} != "$0" ]]; then
    FLOCKER=$0 exec flock "$queue" "$0" "$queue" "$action"
fi
unset FLOCKER

do_list() {
    grep -v -E "$@" '^\s*(#|$)' "$queue"
}

do_add() {
    cat >>"$queue"
}

do_pop() {
    # Get the first line in the queue that isn't blank or commented out.
    # The line number is included so that it can be referenced directly with sed.
    next=$(do_list -n -m1 "$@")

    # As soon as the queue is empty, the grep command will fail and this script
    # will exit with a non-zero status.

    line_num=${next%%:*}
    line=${next#*:}

    # Comment out the line that was just retrieved.
    sed -E -i "${line_num}s/^\s*/# /" "$queue"

    printf "%s\n" "$line"
}

do_clear() {
    sed -E -i "/^\s*[^#]/s/^\s*/# /" "$queue"
}

do_"$action"

#!/usr/bin/env bash

set -euo pipefail

age=${SECRETS_AGE:-age}
data_dir=${SECRETS_DATA_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/secrets}

usage="Simple age-based secrets manager.

Usage:
    secrets ACTION NAME

Options:
    -h              show this help text and exit

    -D DIRECTORY    directory in which to store snippets
                    (default: ${data_dir@Q})

Actions:
    get             print secret to stdout
    set             set secret from stdin
    remove          remove secret

If the store directory is a git repository, each change will be committed."

get_file() {
    local file=$store_dir/$1.age

    if [[ $file == *$'\n'* ]]; then
        printf "Invalid file path: %q (contains newline)\n" "$file" >&2
        exit 1
    fi

    printf "%s" "$file"
}

assert_file() {
    local file
    file=$(get_file "$1")

    if [[ ! -f $file || ! -r $file ]]; then
        printf "File does not exist or is not readable: %q\n" "$file" >&2
        return 1
    fi

    printf "%s" "$file"
}

git_in_store() {
    git -C "$store_dir" "$@"
}

store_is_git_repo() {
    git_in_store rev-parse --is-inside-work-tree &>/dev/null
}

store_file_is_modified() {
    [[ -n $(git_in_store status --porcelain "$1") ]]
}

store_commit() {
    local file=$1 message=$2

    store_is_git_repo || return 0
    git_in_store add "$file" >/dev/null
    store_file_is_modified "$file" || return 0
    git_in_store commit --message="$message" >/dev/null
}

do_get() {
    local file name=$1
    file=$(assert_file "$name")

    "$age" --decrypt --identity "$ids_file" "$file"
}

do_set() {
    local file name=$1
    file=$(get_file "$name")

    mkdir -p "$(dirname "$file")"
    "$age" --encrypt --identity "$ids_file" --armor --output "$file"

    store_commit "$file" "Set secret for ${name@Q}"
}

do_remove() {
    local file name=$1
    file=$(assert_file "$name")

    rm -v "$file"

    store_commit "$file" "Remove secret for ${name@Q}"
}

while getopts ":D:i:h" option; do
    case $option in
    D) data_dir=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

store_dir=$data_dir/store
ids_file=$data_dir/identities

action=${1:?missing action}
name=${2:?missing secret name}

shift 2

case $action in
get | set | remove) ;;
*)
    printf "Invalid action: %s\n" "$action" >&2
    exit 1
    ;;
esac

umask 077

do_"$action" "$name" "$@"

find "$store_dir" -type d -empty -delete

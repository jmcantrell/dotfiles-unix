#!/usr/bin/env bash

set -euo pipefail
shopt -s nullglob globstar

data_dir=${XDG_DATA_HOME:-$HOME/.local/share}/snip

usage="Manage text snippets.

Usage:
    ${0##*/} [OPTIONS] list
    ${0##*/} [OPTIONS] path|read|write|append|edit|delete NAME

Options:
    -h              show this help text and exit

    -D DIRECTORY    directory in which to store snippets
                    (default: ${data_dir@Q})

Arguments:
    ACTION          perform action on snippet
    NAME            snippet on which to perform action

Actions:
    list            print all snippet names to stdout
    path            print snippet path to stdout
    read            print snippet content to stdout
    write           set snippet content from stdin
    append          add to snippet content from stdin
    delete          delete snippet
    edit            open snippet in editor"

do_list() {
    local path
    for path in "$data_dir"/**; do
        if [[ -f $path ]]; then
            printf "%s\n" "${path#"$data_dir/"}"
        fi
    done
}

do_path() {
    if [[ ! -f $1 ]]; then
        return 1
    fi
    printf "%s" "$1"
}

do_append() {
    mkdir -p "$(dirname "$1")"
    cat >>"$1"
}

do_write() {
    rm -f "$1"
    do_append "$1"
}

do_read() {
    [[ -f $1 ]] || return 1
    cat "$1"
}

do_edit() {
    mkdir -p "$(dirname "$1")"
    ${EDITOR:-vim} "$1"
}

do_delete() {
    rm -v "$1"
}

umask 077

while getopts ":D:h" option; do
    case $option in
    D) data_dir=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG"
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

if [[ ! -v 1 ]]; then
    printf "The first argument must be an action\n" >&2
    exit 1
fi

action=$1

case $action in
list | path | read | write | append | delete | edit) ;;
*)
    printf "Invalid action: %s\n" "$action" >&2
    exit 1
    ;;
esac

if [[ $action == list ]]; then
    do_list
    exit 0
fi

if [[ ! -v 2 ]]; then
    printf "The second argument must be a snippet name\n" >&2
    exit 1
fi

snippet=$data_dir/$2

if [[ $snippet == *$'\n'* ]]; then
    printf "Invalid snippet path: %q (contains newline)\n" "$snippet" >&2
    exit 1
fi

do_"$action" "$snippet"

# Remove any orphaned directory nesting.
if [[ -d $data_dir ]]; then
    case $action in
    delete | edit) find "$data_dir/" -mindepth 1 -type d -empty -delete ;;
    esac
fi

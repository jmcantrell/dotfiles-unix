#!/usr/bin/env python3

"""Rename files to a sanitized name."""

import os, string, unicodedata
from argparse import ArgumentParser


def strip_non_word(value, replace=None, allowed=None):
    pool = string.ascii_letters + string.digits + u"-_ " + (allowed or "")
    return u"".join([s for s in value if (s and s in pool) or replace or u" "])


def normalize(value):
    return unicodedata.normalize("NFKD", value).encode("ascii", "ignore")


def normalize_symbols(value):
    xlate = {"&": "and"}
    for symbol, replace in xlate.items():
        value = value.replace(symbol, replace)
    return value


def squeeze(value, s=" "):
    value_new = value
    ss = s * 2
    while True:
        if ss not in value_new:
            break
        value_new = value_new.replace(ss, s)
    return value_new.strip(s)


def sanitize(value, allowed=None):
    value = value.replace('"', "")
    value = value.replace("'", "")
    value = value.replace(".", " ")
    value = normalize(value)
    value = normalize_symbols(value)
    value = strip_non_word(value, allowed=allowed)
    value = squeeze(value, "_")
    return value.lower().replace(" ", "_")


def sane(fn):
    d, n = os.path.split(fn)
    n = sanitize(n)
    nf = os.path.join(d, n) if n else fn
    return nf


def parse_args():
    p = ArgumentParser(description=__doc__)
    p.add_argument("files", nargs="*", metavar="file", help="file to rename")
    p.add_argument("-n", "--noop", action="store_true", help="dry run")
    return p.parse_args()


def main():
    args = parse_args()
    seen = []
    for fn in args.files:
        if os.path.exists(fn):
            nf = sane(fn)
            if nf not in seen:
                seen.append(nf)
            if fn != nf:
                print(nf)
                if not args.dry_run:
                    os.rename(fn, nf)


if __name__ == "__main__":
    main()

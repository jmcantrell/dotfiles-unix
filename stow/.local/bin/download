#!/usr/bin/env bash

set -euo pipefail

me=${0##*/}
usage="Manage file downloads.

Usage: $me [-h] URI...

Options:
    -h     show this help message

Arguments:
    URI    uri of file to download
"

token=$USER@$HOSTNAME

if which xdg-user-dir >/dev/null; then
    dest=$(xdg-user-dir DOWNLOAD)
else
    dest=$HOME/Downloads
fi

session=${XDG_DATA_HOME:-$HOME/.local/share}/aria2/session

usage() {
    echo "$usage" >&2
    exit 0
}

die() {
    echo "$me: $*" >&2
    exit 1
}

add_uris() {
    local target=${1:?missing download target}

    curl -X POST \
        -H 'Content-Type: application/json' \
        -d "{\"jsonrpc\":\"2.0\", \"id\":\"qwer\", \"method\":\"aria2.addUri\", \"params\":[\"token:$token\", [\"$target\"]]}" \
        http://localhost:6800/jsonrpc >&2
}

start_session() {
    mkdir -p "$(dirname "$session")"

    local options=(
        --dir="$dest"
        --save-session="$session"
        --enable-rpc --rpc-secret="$token"
        --follow-torrent=mem
        --follow-metalink=mem
    )

    if [[ -f "$session" ]]; then
        options+=(--input-file="$session")
    fi

    if [[ $concurrent ]]; then
        options+=(--max-concurrent-downloads="$concurrent")
    fi

    if [[ $TORRENT_PORT ]]; then
        options+=(--listen-port="$TORRENT_PORT")
    fi

    exec aria2c "${options[@]}" "$@"
}

unset OPTIND OPTARG
while getopts ":hH:j:" option; do
    case $option in
    h) usage ;;
    j) concurrent=$OPTARG ;;
    *) die "invalid option '$option'" ;;
    esac
done && shift $((OPTIND - 1))

if pgrep aria2c &>/dev/null; then
    (($# > 0)) && add_uris "$@"
else
    start_session "$@"
fi

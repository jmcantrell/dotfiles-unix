#!/usr/bin/env python3

"""Modify and sort semantic version strings."""

import os, sys
from argparse import ArgumentParser


def decode(version):
    """Convert a version string into a tuple."""
    return list(int(i) for i in version.split("."))


def encode(version):
    """Convert a version tuple to a string."""
    return ".".join([str(i) for i in version])


def bump(version, digit, n=1):
    """Increment a digit of version."""
    # make sure version iter has enough digits
    for i in range(len(version), digit + 1):
        version.append(0)
    # increment the desired digit
    version[digit] += n
    # zero the right digits
    for i in range(digit + 1, len(version)):
        version[i] = 0
    return version


def parse_args():
    p = ArgumentParser(description=__doc__)
    p.add_argument("versions", nargs="+", metavar="version", help="version string")
    p.add_argument("-M", "--major", action="store_true", help="add to major version")
    p.add_argument("-m", "--minor", action="store_true", help="add to minor version")
    p.add_argument("-b", "--build", action="store_true", help="add to build version")
    p.add_argument("-s", "--sort", action="store_true", help="sort versions")
    p.add_argument("-r", "--reverse", action="store_true", help="reverse order")
    return p.parse_args()


def main():
    args = parse_args()
    # command line arg or stdin?
    versions = args.versions or sys.stdin.readlines()
    # parse the version strings
    versions = [decode(v) for v in versions]
    # if requested, increment a digit
    if args.build:
        versions = [bump(v, 2) for v in versions]
    if args.minor:
        versions = [bump(v, 1) for v in versions]
    if args.major:
        versions = [bump(v, 0) for v in versions]
    # if requested, sort the version strings
    if args.sort:
        versions.sort()
    # if requested, reverse the version strings
    if args.reverse:
        versions.reverse()
    # convert the versions back to strings for output
    versions = [encode(v) for v in versions]
    print(os.linesep.join(versions))


if __name__ == "__main__":
    main()
